if (!window.django) {
  window.django = {};
  var django = window.django;
}
(function () {
  function e(a) {
    this.value = a;
  }
  djangoFilters || (djangoFilters = {});
  djangoFilters.utils = {
    trim: typeof String.prototype.trim
      ? function (a) {
          return null === a ? "" : String.prototype.trim.call(a);
        }
      : function (a) {
          return null === a
            ? ""
            : a.toString().replace(/^\s+/, "").replace(/\s+$/, "");
        },
    inArray: function (a, b) {
      if (Array.prototype.indexOf) return Array.prototype.indexOf.call(b, a);
      for (var c = 0, d = b.length; c < d; c++) if (b[c] === a) return c;
      return -1;
    },
    l_pad: function (a, b, c) {
      a = a.toString();
      c = c.toString();
      for (var d = ""; d.length < b; ) d = c + d;
      return (a = d.substr(0, b - a.length) + a);
    },
    r_pad: function (a, b, c) {
      a = a.toString();
      for (c = c.toString(); a.length < b; ) a += c;
      return (a = a.substr(0, b));
    },
    parseDate: function (a) {
      var b = new Date(a.replace(/-/g, "/").replace(/T/g, " "));
      return "invalid date" === b.toString().toLowerCase() ? a : b;
    },
  };
  var d = djangoFilters.utils;
  djangoFilters.intcomma = function (a) {
    var b = a;
    a = parseFloat(a);
    if (isNaN(a)) return b;
    var c = String(a),
      d = null;
    -1 < c.indexOf(".") && ((c = c.split(".", 2)), (d = c[1]), (c = c[0]));
    a = "";
    for (var f = 0, e = c.length - 1; 0 <= e; e--)
      (a = (2 === f % 3 && 0 < e ? "," : "") + c[e] + a), f++;
    if (
      -1 <
      djangoFilters.utils.inArray(
        String(b).substr(String(b).length - 2),
        djangoFilters.ordinal.suffixes.current
      )
    )
      return [a, String(b).substr(String(b).length - 2)].join("");
    d && (a = [a, d].join("."));
    return a;
  };
  djangoFilters.apnumber = function (a) {
    var b = a;
    a = parseInt(String(a).replace(/[^\d]+/g, ""), 10);
    return isNaN(a)
      ? b
      : djangoFilters.apnumber.numbers.current[a] || String(a);
  };
  djangoFilters.apnumber.numbers = {
    "en-us": "zero one two three four five six seven eight nine".split(" "),
  };
  djangoFilters.apnumber.numbers.en = djangoFilters.apnumber.numbers["en-us"];
  djangoFilters.apnumber.numbers.current =
    navigator.language && djangoFilters.apnumber.numbers[navigator.language]
      ? djangoFilters.apnumber.numbers[navigator.language]
      : djangoFilters.apnumber.numbers["en-us"];
  djangoFilters.apnumber_reverse = function (a) {
    var b = a;
    a = d.trim(a);
    for (var c = djangoFilters.apnumber.numbers.current.length - 1; 0 <= c; c--)
      if (a === djangoFilters.apnumber.numbers.current[c]) return c;
    a = parseInt(String(a).replace(/[^\d]+/g, ""), 10);
    isNaN(a) && (a = b);
    return a;
  };
  djangoFilters.slugify = function (a) {
    return d
      .trim(a)
      .replace(/[^a-zA-Z0-9-._~]/g, "-")
      .toLowerCase()
      .replace(/^-+/, "")
      .replace(/-+$/, "")
      .replace(/-+/g, "-");
  };
  djangoFilters.ordinal = function (a) {
    var b = parseInt(String(a).replace(/[^\d]+/g, ""), 10);
    return isNaN(b)
      ? a
      : -1 < d.inArray(b % 100, [11, 12, 13])
      ? [a, djangoFilters.ordinal.suffixes.current[0]].join("")
      : [a, djangoFilters.ordinal.suffixes.current[b % 10]].join("");
  };
  djangoFilters.date = function (a, b) {
    function c(a) {
      12 < a ? (a -= 12) : 0 === a && (a = 12);
      return a;
    }
    if (!a || (a.toString && "invalid date" === a.toString().toLowerCase()))
      return a;
    b = b || djangoFilters.date.defaultFormats.date;
    var e = new Date(a.getFullYear(), 0, 1),
      f = {
        a:
          12 > a.getHours()
            ? djangoFilters.date.meridians.current.ap.am
            : djangoFilters.date.meridians.current.ap.pm,
        A:
          12 > a.getHours()
            ? djangoFilters.date.meridians.current.normal.am
            : djangoFilters.date.meridians.current.normal.pm,
        b: djangoFilters.date.months.current.s[a.getMonth()].toLowerCase(),
        d: d.l_pad(a.getDate(), 2, 0),
        D: djangoFilters.date.days.current.s[a.getDay()],
        E: djangoFilters.date.months.current.locale
          ? djangoFilters.date.months.current.locale[a.getMonth()]
          : djangoFilters.date.months.current.l[a.getMonth()],
        f: (function (a) {
          var b = [c(a.getHours())];
          0 !== a.getMinutes() &&
            (b.push(":"), b.push(d.l_pad(a.getMinutes(), 2, 0)));
          return b.join("");
        })(a),
        F: djangoFilters.date.months.current.l[a.getMonth()],
        g: c(a.getHours()),
        G: a.getHours(),
        h: d.l_pad(c(a.getHours()), 2, 0),
        H: d.l_pad(a.getHours(), 2, 0),
        i: d.l_pad(a.getMinutes(), 2, 0),
        j: a.getDate(),
        l: djangoFilters.date.days.current.l[a.getDay()],
        L: Boolean(29 === new Date(a.getFullYear(), 1, 29).getDate()),
        m: d.l_pad(a.getMonth() + 1, 2, 0),
        M: djangoFilters.date.months.current.s[a.getMonth()],
        n: a.getMonth() + 1,
        N: djangoFilters.date.months.current.ap[a.getMonth()],
        O: (function (a) {
          var b = Math.ceil(a.getTimezoneOffset() / 60);
          a = a.getTimezoneOffset() % 60;
          return (0 >= b ? "+" : "-") + d.l_pad(b, 2, 0) + d.l_pad(a, 2, 0);
        })(a),
        P: (function (a) {
          if (
            (0 === a.getHours() || 12 === a.getHours()) &&
            0 === a.getMinutes()
          )
            return djangoFilters.date.meridians.current.normal[a.getHours()];
          var b = [c(a.getHours())];
          0 !== a.getMinutes() &&
            (b.push(":"), b.push(d.l_pad(a.getMinutes(), 2, 0)));
          b.push(" ");
          b.push(
            12 > a.getHours()
              ? djangoFilters.date.meridians.current.ap.am
              : djangoFilters.date.meridians.current.ap.pm
          );
          return b.join("");
        })(a),
        s: d.l_pad(a.getSeconds(), 2, 0),
        S: djangoFilters.ordinal(a.getDate()).replace(a.getDate(), ""),
        t: 32 - new Date(a.getYear(), a.getMonth(), 32).getDate(),
        T: (function (a) {
          a = a.toTimeString();
          return (a = a.substring(a.indexOf("(") + 1, a.length - 1));
        })(a),
        u: 1e3 * a.getMilliseconds(),
        U: Math.floor(a.getTime() / 1e3),
        w: a.getDay(),
        W: (function (a) {
          var b = e.getDay(),
            b = 0 <= b ? b : b + 7,
            c =
              Math.floor(
                (a.getTime() -
                  e.getTime() -
                  6e4 * (a.getTimezoneOffset() - e.getTimezoneOffset())) /
                  864e5
              ) + 1;
          4 > b
            ? ((b = Math.floor((c + b - 1) / 7) + 1),
              52 < b &&
                ((b = new Date(a.getFullYear() + 1, 0, 1).getDay()),
                (b = 4 > (0 <= b ? b : b + 7) ? 1 : 53)))
            : (b = Math.floor((c + b - 1) / 7));
          return 0 < b ? b : 1;
        })(a),
        y: a.getFullYear().toString().substr(2),
        Y: a.getFullYear(),
        z: Math.ceil((a - e) / 864e5),
        Z: (function (a) {
          a = -60 * a.getTimezoneOffset();
          return (0 > a ? "-" : "") + d.r_pad(Math.abs(a), 5, 0);
        })(a),
      };
    f.c = [
      f.Y,
      "-",
      f.m,
      "-",
      f.d,
      "T",
      f.H,
      ":",
      f.i,
      ":",
      f.s,
      ".",
      d.l_pad(f.u, 6, 0),
    ].join("");
    f.r = [
      f.D,
      ", ",
      f.j,
      " ",
      f.M,
      " ",
      f.Y,
      " ",
      f.H,
      ":",
      f.i,
      ":",
      f.s,
      " ",
      f.O,
    ].join("");
    b = b.split("");
    b.reverse();
    for (var g = [], h, k = b.length - 1; 0 <= k; k--) {
      var l = b[k];
      "%" === h || "%" === l
        ? ("%" === h && g.push(l), (h = l))
        : g.push(l in f ? f[l] : l);
    }
    return 1 === g.length && "boolean" === typeof g[0] ? g[0] : g.join("");
  };
  djangoFilters.time = function (a, b) {
    return djangoFilters.date(a, b || djangoFilters.date.defaultFormats.time);
  };
  djangoFilters.cut = function (a, b) {
    return String(a).replace(RegExp(b, "g"), "");
  };
  djangoFilters.date.defaultFormats = { date: "N j, Y", time: "P" };
  djangoFilters.ordinal.suffixes = {
    "en-us": "th st nd rd th th th th th th".split(" "),
  };
  djangoFilters.date.months = {
    "en-us": {
      l: "January February March April May June July August September October November December".split(
        " "
      ),
      s: "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
      ap: "Jan. Feb. March April May June July Aug. Sept. Oct. Nov. Dec.".split(
        " "
      ),
    },
  };
  djangoFilters.date.days = {
    "en-us": {
      l: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
      s: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
    },
  };
  djangoFilters.date.meridians = {
    "en-us": {
      ap: { am: "a.m.", pm: "p.m." },
      normal: { am: "AM", pm: "PM", 0: "midnight", 12: "noon" },
    },
  };
  for (
    var k = ["months", "meridians", "days", "suffixes"], h = k.length - 1;
    0 <= h;
    h--
  ) {
    var g;
    if (
      (g =
        "suffixes" === k[h]
          ? djangoFilters.ordinal[k[h]]
          : djangoFilters.date[k[h]])
    )
      g["en-us"] && (g.en = g["en-us"]),
        (g.current =
          navigator.language && g[navigator.language]
            ? g[navigator.language]
            : g["en-us"]);
  }
  (function (a, b) {
    function c() {}
    c.prototype = b.prototype;
    a.prototype = new c();
    a.prototype.constructor = a;
    a.superclass = b;
    a.superproto = b.prototype;
  })(e, String);
  e.prototype.toString = function () {
    return this.value;
  };
  e.prototype.valueOf = function () {
    return this.value;
  };
  e.prototype.apnumber = function () {
    this.value = djangoFilters.apnumber(this.value);
    return this;
  };
  e.prototype.apnumber_reverse = function () {
    this.value = djangoFilters.apnumber_reverse(this.value);
    return this;
  };
  e.prototype.cut = function (a) {
    this.value = djangoFilters.cut(this.value, a);
    return this;
  };
  e.prototype.date = function (a) {
    var b = djangoFilters.utils.parseDate(this.value);
    b.toString() !== this.value && (this.value = djangoFilters.date(b, a));
    return this;
  };
  e.prototype.intcomma = function () {
    this.value = djangoFilters.intcomma(this.value);
    return this;
  };
  e.prototype.ordinal = function () {
    this.value = djangoFilters.ordinal(this.value);
    return this;
  };
  e.prototype.slugify = function () {
    this.value = djangoFilters.slugify(this.value);
    return this;
  };
  e.prototype.time = function (a) {
    var b = djangoFilters.utils.parseDate(this.value);
    b.toString() !== this.value && (this.value = djangoFilters.time(b, a));
    return this;
  };
  e.prototype.trim = function () {
    this.value = djangoFilters.utils.trim(this.value);
    return this;
  };
  djangoFilter = function (a) {
    return (this.dfs = new e(a));
  };
  djangoFilter.toString = function () {
    return this.dfs.toString();
  };
  djangoFilter.toSource = function () {
    return this.dfs.toSource();
  };
  djangoFilter.valueOf = function () {
    return this.dfs.valueOf();
  };
})();
