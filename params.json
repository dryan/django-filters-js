{"name":"Django-filters-js","tagline":"A project to convert the default and contrib.humanize template filters from Django to JavaScript","body":"django-filters-js\r\n=================\r\n\r\nA project to convert the default and contrib.humanize template filters from Django to JavaScript\r\n\r\n## Usage\r\n\r\nAdd `<script src=\"django-filters.min.js\"></script>` to your page. There are no dependencies.\r\n\r\n## Chainable Strings\r\n\r\n`django.filter` implements a chainable object similar to jQuery. This allows for multiple methods to be run in sequence. For example:\r\n\r\n    var myString    =   django.filter(\"This is a test sentence\").slugify().cut('-'); // becomes \"thisisatestsentence\"\r\n    // or\r\n    var myString2   =   django.filter(200000);\r\n    myString2.apnumber().intcomma(); // becomes 200,000\r\n    \r\n## Methods\r\n\r\n*In addition to the chainable pattern, you can call each method directly at `django.filters.[methodName]` with the string, number or date to filter as the first argument.*\r\n\r\n    django.filters.slugify(\"This is a test sentence\"); // becomes \"this-is-a-test-sentence\"\r\n    django.filters.slugify(\"This is a test sentence\").cut('-'); // raises a TypeError\r\n\r\n<a id=\"intcomma\"></a>\r\n### [.intcomma()](#intcomma)\r\n\r\nAdds comma separators to a number or string representation of a number.\r\n\r\n* `1000000` becomes `1,000,000`\r\n* `1000` becomes `1,000`\r\n* `100` becomes `100`\r\n\r\n<a id=\"apnumber\"></a>\r\n### [.apnumber()](#apnumber)\r\n\r\nFor integers 0-9, returns the word. For integers 10+, returns the integer.\r\n\r\n* `1` becomes `one`\r\n* `10` becomes `10`\r\n\r\n<a id=\"slugify\"></a>\r\n### [.slugify()](#slugify)\r\n\r\nReturns a URI safe version of the string, lowercased with all non-standard characters replaced with '-'.\r\n\r\n<a id=\"ordinal\"></a>\r\n### [.ordinal()](#ordinal)\r\n\r\nAppends the ordinal suffix to a number or string representation of a number\r\n\r\n* `1` becomes `1st`\r\n* `33` becomes `33rd`\r\n\r\n<a id=\"date\"></a>\r\n### [.date(format)](#date)\r\n\r\nFormats a Date object according to the `format` parameter (a string). Use `%` to escape characters; use `%%`to print a literal `%`. For formatting options, see [Django's date documentation](https://docs.djangoproject.com/en/1.5/ref/templates/builtins/#date).\r\n\r\n<a id=\"time\"></a>\r\n### [.time(format)](#time)\r\n\r\nAn alias of `.date()`. Unlike the Django implementation, `.time()` works with Date objects since there isn't a time-only equivalent in JavaScript.\r\n\r\n<a id=\"cut\"></a>\r\n### [.cut(toCut)](#cut)\r\n\r\nRemoves all instances of the `toCut` parameter from the string.\r\n\r\n<a id=\"trim\"></a>\r\n### [.trim()](#trim)\r\n\r\nRemoves whitespace from the beginning and end of the string. *Only available on instances of `django.filter()`. To use on plain strings, see [`django.filters.utils.trim`](#utils-trim) below.*\r\n\r\n## Utility Methods\r\n\r\nThere are five methods primarily intended for internal use by the filter methods, but may be of use on their on as well.\r\n\r\n<a id=\"utils-trim\"></a>\r\n### [django.filters.utils.trim(text)](#utils-trim)\r\n\r\nRemoves whitespace from the beginning and end of the string.\r\n\r\n<a id=\"utils-inarray\"></a>\r\n### [django.filters.utils.inArray(element, array)](#utils-inarray)\r\n\r\nReturns the position of `element` in `array`. Returns `-1` if `element` is not found.\r\n\r\n<a id=\"utils-l_pad\"></a>\r\n### [django.filters.utils.l_pad(object, length, pad)](#utils-l_pad)\r\n\r\nEnsures that the string representation of `object` is at least as long as `length`. If `object` is shorter, `pad` is added to the beginning of `object` until is reaches `length`.\r\n\r\n<a id=\"utils-r_pad\"></a>\r\n### [django.filters.utils.r_pad(object, length, pad)](#utils-r_pad)\r\n\r\nEnsures that the string representation of `object` is at least as long as `length`. If `object` is shorter, `pad` is added to the end of `object` until is reaches `length`.\r\n\r\n<a id=\"utils-parsedate\"></a>\r\n### [django.filters.utils.parseDate(dateString)](#utils-parsedate)\r\n\r\nTurns a string representation of a date and turns it into a `Date` object. If the `dateString` cannot be parsed, returns the original string.\r\n","google":"UA-3625251-12","note":"Don't delete this file! It's used internally to help with page regeneration."}